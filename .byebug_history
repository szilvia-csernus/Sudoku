exit
next
c
col
next
c
next
arr.to_set
arr
s
c
arr.to_set == Board::NUMBERS
arr.to_set
arr
s
arr_solved?(row)
c
row
c
nextc
row
c
next
c
row
c
hash
next
s
arr
next
arr
next
col_index
next
display row[col_index]
row[col_index]
row
arr
next
arr
s
c
self[pos]
pos
next
pos
next
c
pos
next
display col
display row
row
pos
c
hash[ele.value]
next
hash[ele.value]
s
hash[ele.value]
ele.value
ele
s
next
arr
s
next
c
hash[ele.value]
next
hash[ele.value]
ele.value
next
hash[ele.value]
next
hash[ele.value]
ele.value
ele
s
next
hash
s
arr
next
c
hash
next
hash
next
s
arr
next
c
arr
next
c
self
c
self
c
self
next
c
self
c
self
next
c
self
self[pos]
next
display col
display row
next
c
next
c
@grid[row][col]
next
c
self[pos]
next
display pos
pos
next
display col
display row
next
display col
display row
c
self[pos]
c
self[*pos]
self[pos]
*pos
pos
c
pos
c
pos
c
display col
display row
display pos
s
display pos
c
display pos
next
display pos
exit
c
valid_pos?(row, col)
display @board.grid[row][col].given
s
next
display num
display col
display row
next
display @board[row][col]
s
next
display num
display col
next
display row
next
s
display input
